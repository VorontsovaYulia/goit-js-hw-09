{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACHN,EAERI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAGpBM,EAAO,CAAEE,SAAAT,EAAUU,MAAAT,GAAQ,GAExBA,EAAM,IAGRU,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBhB,EAAAkB,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAU,IAElEI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAChBhB,EAAAkB,OAAOG,QAAQ,sBAAoBN,QAAeC,MAAU,G,CAKlEd,EAAKoB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAIC,iBAGJ,MAAMC,EAAUF,EAAIG,cAAcC,SAElC,IAAIC,EAAaC,OAAOJ,EAAQT,MAAMc,OACtC,MAAMC,EAAYF,OAAOJ,EAAQO,KAAKF,OAChCG,EAAcJ,OAAOJ,EAAQS,OAAOJ,OAG1C,IAAK,IAAIK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACjCA,EAAI,IACNP,GAAcG,GAEhB1B,EAAc8B,EAAGP,GAEnB1B,EAAKkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector(\".form\");\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n        if (shouldResolve) {\n    \n    resolve({ position, delay })\n  } else {\n\n    reject({ position, delay })\n  }\n    }, delay)\n  })\n  promise\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n    })\n  .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n    })\n  \n}\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n \n\n  const current = evt.currentTarget.elements;\n  \n  let inputDelay = Number(current.delay.value);\n  const inputStep = Number(current.step.value);\n  const inputAmount = Number(current.amount.value);\n  \n\n  for (let i = 1; i <= inputAmount; i += 1){\n    if (i > 1) {\n      inputDelay += inputStep;\n    }\n    createPromise(i, inputDelay)\n  }\n  form.reset();\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","Notify","success","catch","failure","addEventListener","evt","preventDefault","current","currentTarget","elements","inputDelay","Number","value","inputStep","step","inputAmount","amount","i","reset"],"version":3,"file":"03-promises.f4fc20a2.js.map"}